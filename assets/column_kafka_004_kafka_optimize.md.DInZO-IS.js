import{_ as s,c as i,o as a,a3 as n}from"./chunks/framework.pgMqRpUO.js";const y=JSON.parse('{"title":"Kafka 调优","description":"","frontmatter":{},"headers":[],"relativePath":"column/kafka/004_kafka_optimize.md","filePath":"column/kafka/004_kafka_optimize.md"}'),l={name:"column/kafka/004_kafka_optimize.md"},h=n(`<h1 id="kafka-调优" tabindex="-1">Kafka 调优 <a class="header-anchor" href="#kafka-调优" aria-label="Permalink to &quot;Kafka 调优&quot;">​</a></h1><h2 id="_1-提高生产者吞吐量" tabindex="-1">1. 提高生产者吞吐量 <a class="header-anchor" href="#_1-提高生产者吞吐量" aria-label="Permalink to &quot;1. 提高生产者吞吐量&quot;">​</a></h2><p>有以下几个参数可以设置</p><ol><li>batch.size: 批次大小，默认 16k</li><li>linger.ms: 等待时间，默认 0， 修改为 5-100ms</li><li>compression.type：压缩方式使用 snappy（可选：gzip、snappy、lz4、zstd）</li><li>RecordAccumulator：缓存区大小，如果分区数量过多（假设有一万个）可以调大一些，例如 64M</li></ol><h3 id="_1-1-api-方式调整" tabindex="-1">1.1 API 方式调整 <a class="header-anchor" href="#_1-1-api-方式调整" aria-label="Permalink to &quot;1.1 API 方式调整&quot;">​</a></h3><ol><li>kafka 默认会创建一个消息缓冲区，用来存放要发送的消息，缓冲区是 32m</li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">props.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">put</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ProducerConfig.BUFFER_MEMORY_CONFIG, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">33554432</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><ol start="2"><li>kafka 本地线程会去缓冲区中一次拉 16k 的数据，发送到 broker</li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">props.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">put</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ProducerConfig.BATCH_SIZE_CONFIG, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16384</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><ol start="3"><li>如果线程拉不到 16k 的数据，间隔 10ms 也会将已拉到的数据发到 broker</li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">props.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">put</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ProducerConfig.LINGER_MS_CONFIG, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><ol start="4"><li>设置压缩方式</li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">props.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">put</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ProducerConfig.COMPRESSION_TYPE_CONFIG, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;snappy&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h3 id="_1-2-springboot-配置文件调整" tabindex="-1">1.2 springboot 配置文件调整 <a class="header-anchor" href="#_1-2-springboot-配置文件调整" aria-label="Permalink to &quot;1.2 springboot 配置文件调整&quot;">​</a></h3><div class="language-yml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">spring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  kafka</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    bootstrap-servers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">172.16.253.38:9092,172.16.253.38:9093,172.16.253.38:9094</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    producer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 生产者</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      retries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 设置大于0的值，则客户端会将发送失败的记录重新发送</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      batch-size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16384</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 每次发送时多少一批次 这里设置的是16kb</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      buffer-memory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">33554432</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 设置内存缓存区32Mb</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      linger.ms</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      compression-type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">snappy</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 使用snappy压缩发送的数据</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      acks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # leader收到消息后就返回ack</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 指定消息key和消息体的编解码方式</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      key-serializer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">org.apache.kafka.common.serialization.StringSerializer</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      value-serializer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">org.apache.kafka.common.serialization.StringSerializer</span></span></code></pre></div><h2 id="_2-提高消费者吞吐量" tabindex="-1">2 提高消费者吞吐量 <a class="header-anchor" href="#_2-提高消费者吞吐量" aria-label="Permalink to &quot;2 提高消费者吞吐量&quot;">​</a></h2><p>默认的可以修改的参数设置 max.poll.records：每一次 poll 拉取条数，默认 500 条 长轮询时间，默认 1 秒 poll 消费时间，默认 30s，可以适当设置大一些，防止消费者被踢出集群导致 rebalance 消费者心跳时间，默认一秒，可以适当调大一些 设置并发数：concurrency = &quot;3&quot; ，concurrency 就是同组下的消费者个数，就是并发消费数，建议小于等于分区总数</p><h3 id="_2-1-api-方式" tabindex="-1">2.1 API 方式 <a class="header-anchor" href="#_2-1-api-方式" aria-label="Permalink to &quot;2.1 API 方式&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//一次poll最大拉取消息的条数，可以根据消费速度的快慢来设置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">props.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">put</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ConsumerConfig.MAX_POLL_RECORDS_CONFIG, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 设置长轮询时间为1s</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ConsumerRecords&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; records </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> consumer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">poll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Duration.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ofMillis</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 如果两次poll的时间如果超出了30s的时间间隔，kafka会认为其消费能力过弱，将其踢出消费组。将分区分配给其他消费者。即rebalance</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">props.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">put</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ConsumerConfig.MAX_POLL_INTERVAL_MS_CONFIG, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 心跳时间</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> props.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">put</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ConsumerConfig.HEARTBEAT_INTERVAL_MS_CONFIG, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h3 id="_2-2-springboot-方式" tabindex="-1">2.2 SpringBoot 方式 <a class="header-anchor" href="#_2-2-springboot-方式" aria-label="Permalink to &quot;2.2 SpringBoot 方式&quot;">​</a></h3><div class="language-yml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">spring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  kafka</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    bootstrap-servers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">172.16.253.38:9092,172.16.253.38:9093,172.16.253.38:9094</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 消费者</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    consumer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      group-id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">default-group</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 组内单播，组间广播</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      enable-auto-commit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 关闭消费自动提交</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      auto-offset-reset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">earliest</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 新消费组启动会从头信息消费</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      key-deserializer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">org.apache.kafka.common.serialization.StringDeserializer</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      value-deserializer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">org.apache.kafka.common.serialization.StringDeserializer</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      max-poll-records</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">500</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 每次长轮询拉取多少条消息</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    listener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 当每一条记录被消费者监听器（ListenerConsumer）处理之后提交</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # RECORD</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 当每一批poll()的数据被消费者监听器（ListenerConsumer）处理之后提交</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # BATCH</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 当每一批poll()的数据被消费者监听器（ListenerConsumer）处理之后，距离上次提交时间大于TIME时提交</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # TIME</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 当每一批poll()的数据被消费者监听器（ListenerConsumer）处理之后，被处理record数量大于等于COUNT时提交</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # COUNT</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # TIME |　COUNT　有一个条件满足时提交</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # COUNT_TIME</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 当每一批poll()的数据被消费者监听器（ListenerConsumer）处理之后, 手动调用Acknowledgment.acknowledge()后提交</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # MANUAL</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 手动调用Acknowledgment.acknowledge()后立即提交，一般使用这种</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # MANUAL_IMMEDIATE</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      ack-mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">MANUAL_IMMEDIATE</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">KafkaListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">groupId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;testGroup&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">               topicPartitions</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                   @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">TopicPartition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">topic</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;topic1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">partitions</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                   @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">TopicPartition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">topic</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;topic2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">partitions</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">partitionOffsets</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">PartitionOffset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">partition</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">initialOffset</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;100&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">               }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">concurrency</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//concurrency就是同组下的消费者个数，就是并发消费数，建议小于等于分区总数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listenGroupPro</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ConsumerRecord</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String, String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> record, Acknowledgment ack) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    String value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> record.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(record);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //手动提交offset</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ack.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">acknowledge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="数据可靠性" tabindex="-1">数据可靠性 <a class="header-anchor" href="#数据可靠性" aria-label="Permalink to &quot;数据可靠性&quot;">​</a></h2><h3 id="防止数据丢失" tabindex="-1">防止数据丢失 <a class="header-anchor" href="#防止数据丢失" aria-label="Permalink to &quot;防止数据丢失&quot;">​</a></h3><ul><li>生产者：1）使用同步发送 2）把 ack 设成 1 或者 all，并且设置同步的分区数&gt;=2</li><li>消费者：把自动提交改成手动提交</li></ul><h3 id="如何防止重复消费" tabindex="-1">如何防止重复消费 <a class="header-anchor" href="#如何防止重复消费" aria-label="Permalink to &quot;如何防止重复消费&quot;">​</a></h3><p>在防止消息丢失的方案中，如果生产者发送完消息后，因为网络抖动，没有收到 ack，但实际上 broker 已经收到了。</p><p>此时生产者会进行重试，于是 broker 就会收到多条相同的消息，而造成消费者的重复消费。</p><p>怎么解决：</p><p>生产者关闭重试：会造成丢消息（不建议）</p><p>消费者解决非幂等性消费问题：</p><p>所谓的幂等性：多次访问的结果是一样的。对于 rest 的请求（get（幂等）、post（非幂等）、put（幂等）、delete（幂等））</p><p>解决方案：</p><ul><li>在数据库中创建联合主键，防止相同的主键 创建出多条记录</li><li>使用分布式锁，以业务 id 为锁。保证只有一条记录能够创建成功</li></ul><h3 id="如何保证消息顺序消费" tabindex="-1">如何保证消息顺序消费 <a class="header-anchor" href="#如何保证消息顺序消费" aria-label="Permalink to &quot;如何保证消息顺序消费&quot;">​</a></h3><ul><li>生产者：使用同步的发送，并且通过设置 key 指定路由策略，只发送到一个分区中；ack 设置成非 0 的值。</li><li>消费者：主题只能设置一个分区，消费组中只能有一个消费者；不要设置异步线程防止异步导致的乱序，或者设置一个阻塞队列进行异步消费</li></ul><h3 id="如何解决消息积压问题" tabindex="-1">如何解决消息积压问题 <a class="header-anchor" href="#如何解决消息积压问题" aria-label="Permalink to &quot;如何解决消息积压问题&quot;">​</a></h3><p>消息的消费者的消费速度远赶不上生产者的生产消息的速度，导致 kafka 中有大量的数据没有被消费。随着没有被消费的数据堆积越多，消费者寻址的性能会越来越差，最后导致整个 kafka 对外提供的服务的性能很差，从而造成其他服务也访问速度变慢，造成服务雪崩。</p><h4 id="解决方案" tabindex="-1">解决方案 <a class="header-anchor" href="#解决方案" aria-label="Permalink to &quot;解决方案&quot;">​</a></h4><ol><li>在这个消费者中，使用多线程，充分利用机器的性能进行消费消息。</li><li>通过业务的架构设计，提升业务层面消费的性能。</li><li>创建多个消费组，多个消费者，部署到其他机器上，一起消费，提高消费者的消费速度</li><li>创建一个消费者，该消费者在 kafka 另建一个主题，配上多个分区，多个分区再配上多个消费者。该消费者将 poll 下来的消息，不进行消费，直接转发到新建的主题上。此时，新的主题的多个分区的多个消费者就开始一起消费了。——不常用</li></ol>`,40),k=[h];function p(t,e,r,E,d,o){return a(),i("div",null,k)}const c=s(l,[["render",p]]);export{y as __pageData,c as default};
