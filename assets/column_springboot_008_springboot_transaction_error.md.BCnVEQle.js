import{_ as s,c as a,o as i,a3 as n}from"./chunks/framework.pgMqRpUO.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"column/springboot/008_springboot_transaction_error.md","filePath":"column/springboot/008_springboot_transaction_error.md"}'),t={name:"column/springboot/008_springboot_transaction_error.md"},p=n(`<h2 id="springboot-事务失效的场景" tabindex="-1">SpringBoot 事务失效的场景 <a class="header-anchor" href="#springboot-事务失效的场景" aria-label="Permalink to &quot;SpringBoot 事务失效的场景&quot;">​</a></h2><h3 id="事务方法未被-spring-管理" tabindex="-1">事务方法未被 Spring 管理 <a class="header-anchor" href="#事务方法未被-spring-管理" aria-label="Permalink to &quot;事务方法未被 Spring 管理&quot;">​</a></h3><p>事务方法所在的类没有注册到 Spring IOC 容器中，也就是说，事务方法所在类并没有被 Spring 管理，则 Spring 事务会失效</p><h3 id="方式使用-final-类型修饰" tabindex="-1">方式使用 final 类型修饰 <a class="header-anchor" href="#方式使用-final-类型修饰" aria-label="Permalink to &quot;方式使用 final 类型修饰&quot;">​</a></h3><p>Spring 事务底层使用了 AOP，也就是通过 JDK 动态代理或者 cglib，帮我们生成了代理类，在代理类中实现的事务功能。但如果某个方法用 final 修饰了，那么在它的代理类中，就无法重写该方法，从而无法添加事务功能。这种情况事务就会在 Spring 中失效。</p><h3 id="非-public-修饰的方法" tabindex="-1">非 public 修饰的方法 <a class="header-anchor" href="#非-public-修饰的方法" aria-label="Permalink to &quot;非 public 修饰的方法&quot;">​</a></h3><p>如果事务方式不是 public 修饰，此时 Spring 事务会失效</p><h3 id="同一个类中的方法相互调用" tabindex="-1">同一个类中的方法相互调用 <a class="header-anchor" href="#同一个类中的方法相互调用" aria-label="Permalink to &quot;同一个类中的方法相互调用&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Service</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OrderService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> extend{</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ProductMapper productMapper;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OrderService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ProductMapper </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">productMapper</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.productMapper </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> productMapper;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    pub </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> submit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 其他逻辑</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">updateProductStockById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(order.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getProductId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Transactional</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">propagation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Propagation.REQUIRES_NEW)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> updateProductStockById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Integer </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">num</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Long </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">productId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        productMapper.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">updateProductStockById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num, productId);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="方法的事务传播类型不支持事务" tabindex="-1">方法的事务传播类型不支持事务 <a class="header-anchor" href="#方法的事务传播类型不支持事务" aria-label="Permalink to &quot;方法的事务传播类型不支持事务&quot;">​</a></h3><p>如果事务传播定义为 Propagation.NOT_SUPPORTED，事务会失效</p><h3 id="异常被内部-catch" tabindex="-1">异常被内部 catch <a class="header-anchor" href="#异常被内部-catch" aria-label="Permalink to &quot;异常被内部 catch&quot;">​</a></h3><p>程序异常，没抛出异常</p><h3 id="数据库不支持事务" tabindex="-1">数据库不支持事务 <a class="header-anchor" href="#数据库不支持事务" aria-label="Permalink to &quot;数据库不支持事务&quot;">​</a></h3><p>使用 MySQL 数据库，选用 MyISAM 存储引擎，因为 MyISAM 存储引擎本身不支持事务，因此事务毫无疑问会失效。</p><h3 id="未配置开启事务" tabindex="-1">未配置开启事务 <a class="header-anchor" href="#未配置开启事务" aria-label="Permalink to &quot;未配置开启事务&quot;">​</a></h3><p>缺少 DataSourceTransactionManager bean</p><h3 id="错误的传播特性" tabindex="-1">错误的传播特性 <a class="header-anchor" href="#错误的传播特性" aria-label="Permalink to &quot;错误的传播特性&quot;">​</a></h3><p>参考<a href="./006_spring_transaction.html">SpringBoot 事务传播机制</a></p><h3 id="多线程调用" tabindex="-1">多线程调用 <a class="header-anchor" href="#多线程调用" aria-label="Permalink to &quot;多线程调用&quot;">​</a></h3><p>Spring 的事务是通过 ThreadLocal 来保证线程安全的，事务和当前线程绑定，多个线程自然会让事务失效。</p>`,21),h=[p];function l(e,r,k,o,d,c){return i(),a("div",null,h)}const u=s(t,[["render",l]]);export{g as __pageData,u as default};
